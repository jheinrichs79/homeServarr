#---------------------------------------------------------------------#
services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${VOL_BASE}/standardApps/portainer/data:/data
    ports:
      - ${P_PORTAINER}:9443
    restart: unless-stopped
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - 53:53/tcp
      - 53:53/udp
      # Default HTTP Port
      - ${P_PIHOLE_01}:80/tcp
      # Default HTTPs Port. FTL will generate a self-signed certificate
      - ${P_PIHOLE_02}:443/tcp
      #Pi-hole will act as NTP server
      - 123:123/udp
    environment:
      # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g:
      TZ: ${TZ}
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: ${PASSWORD}
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: 'all'
    # Volumes store your data between container upgrades
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - ${VOL_BASE}/standardApps/pihole/etc-pihole:/etc/pihole'
      # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
      #- './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    restart: unless-stopped
  speedtest-tracker:
    container_name: speedtest-tracker
    image: henrywhitaker3/speedtest-tracker
    ports:
      - ${P_SPEEDTEST_TRACKER}:80
    volumes:
      - ${VOL_BASE}/standardApps/speedtest/config:/config
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=${TZ}
      - OOKLA_EULA_GDPR=true
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    restart: unless-stopped
  speedtest:
    image: openspeedtest/latest
    container_name: openspeedtest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - SET_SERVER_NAME=${SPEEDTEST_NAME}
    ports:
      - ${P_SPEEDTEST_01}:3000 #HTTP
      - ${P_SPEEDTEST_02}:3001 #HTTPS
    restart: unless-stopped
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${PASSWORD} #optional
      - DEFAULT_WORKSPACE=/config/workspace #optional
    volumes:
      - ${VOL_BASE}/standardApps/code-server/config:/config
    ports:
      - ${P_CODESERVER}:8443
    restart: unless-stopped
  homarr:
    container_name: homarr
    image: ghcr.io/homarr-labs/homarr:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${VOL_BASE}/standardApps/homarr/appdata:/appdata
    environment:
      - SECRET_ENCRYPTION_KEY=${HOMARR_SECRET}  # <--- CHANGE!!!! - update .env file. A ney key can be generated with `openssl rand -hex 32`
    ports:
      - ${P_HOMARR}:7575
    restart: unless-stopped
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    hostname: ${SYNCTHING_NAME}
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ${VOL_BASE}/standardApps/syncthing/config:/config
      - ${VOL_BASE}/standardApps/syncthing/data1:/data1
      - ${VOL_BASE}/standardApps/syncthing/data2:/data2
    ports:
      - ${P_SYNCTHING_01}:8384
      - ${P_SYNCTHING_02}:22000/tcp
      - ${P_SYNCTHING_03}:22000/udp
      - ${P_SYNCTHING_01}:21027/udp
    restart: unless-stopped
  documentserver:
    image: onlyoffice/documentserver
    container_name: onlyoffice_documentserver
    ports:
      - ${P_DOCUMENTSERVER_01}:80
      - ${P_DOCUMENTSERVER_02}:443
    volumes:
      - ${VOL_BASE}/standardApps/documentserver/data:/var/www/onlyoffice/Data
      - ${VOL_BASE}/standardApps/documentserver/log:/var/log/onlyoffice
      - ${VOL_BASE}/standardApps/documentserver/lib:/var/lib/onlyoffice
      - ${VOL_BASE}/standardApps/documentserver/db:/var/lib/postgresql
    environment:
      - JWT_SECRET=${PASSWORD}
    restart: unless-stopped
  drawio:
    image: jgraph/drawio
    ports:
      - ${P_DRAWIO}:8080
    environment:
      DRAWIO_BASE_URL: "http://localhost:8080"
  excalidraw:
    container_name: excalidraw
    image: excalidraw/excalidraw:latest
    ports:
      - ${P_EXCALIDRAW}:80
    restart: unless-stopped
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${VOL_MEDIA}/photos/immich:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${P_IMMICH}:2283
    depends_on:
      - redis
      - database
    restart: unless-stopped
    healthcheck:
      disable: false
  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false
  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:42cba146593a5ea9a622002c1b7cba5da7be248650cbb64ecb9c6c33d29794b1
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    environment:
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${VOL_BASE}/standardApps/immich_postgres:/var/lib/postgresql/data
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: unless-stopped
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    #security_opt:
    #  - seccomp: unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${VOL_BASE}/calibre/config:/config
      - ${VOL_MEDIA}/books:/books
    ports:
      - ${P_CALIBRE_01}:8080
      - ${P_CALIBRE_02}:8181
      - ${P_CALIBRE_03}:8081
    restart: unless-stopped

volumes:
  model-cache:
